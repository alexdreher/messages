require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by the Rails when you ran the scaffold generator.

describe MessagesController do
  # http://www.michaelharrison.ws/weblog/?p=349
  include Devise::TestHelpers
  
  def mock_user(stubs={})
      @mock_user ||= mock_model(User, stubs).as_null_object
  end

  before(:each) do
      # mock up an authentication in the underlying warden library
      request.env['warden'] = mock(Warden, :authenticate => mock_user,
                                           :authenticate! => mock_user)
  end
  # endsnip

  def mock_message(stubs={})
    @mock_message ||= mock_model(Message, stubs).as_null_object
  end

  describe "GET index" do
    it "assigns all messages as @messages" do
      @mock_user.messages.stub(:all) { [mock_message] }
      get :index
      assigns(:messages).should eq([mock_message])
    end
  end

  describe "GET show" do
    it "assigns the requested message as @message" do
      @mock_user.message.stub(:find).with("37") { mock_message }
      get :show, :id => "37"
      assigns(:message).should be(mock_message)
    end
  end

  describe "GET new" do
    it "assigns a new message as @message" do
      Message.stub(:new) { mock_message }
      get :new
      assigns(:message).should be(mock_message)
    end
  end

  describe "POST create" do
    describe "with valid params" do
      it "assigns a newly created message as @message" do
        @mock_user.message.stub(:new).with({'these' => 'params'}) { mock_message(:save => true) }
        post :create, :message => {'these' => 'params'}
        assigns(:message).should be(mock_message)
      end

      it "redirects to the created message" do
        @mock_user.message.stub(:new) { mock_message(:save => true) }
        post :create, :message => {}
        response.should redirect_to(message_url(mock_message))
      end
    end

    describe "with invalid params" do
      it "assigns a newly created but unsaved message as @message" do
        @mock_user.message.stub(:new).with({'these' => 'params'}) { mock_message(:save => false) }
        post :create, :message => {'these' => 'params'}
        assigns(:message).should be(mock_message)
      end

      it "re-renders the 'new' template" do
        @mock_user.message.stub(:new) { mock_message(:save => false) }
        post :create, :message => {}
        response.should render_template("new")
      end
    end
  end

  describe "DELETE destroy" do
    it "destroys the requested message" do
      @mock_user.message.stub(:find).with("37") { mock_message }
      mock_message.should_receive(:destroy)
      delete :destroy, :id => "37"
    end

    it "redirects to the messages list" do
      @mock_user.message.stub(:find) { mock_message }
      delete :destroy, :id => "1"
      response.should redirect_to(messages_url)
    end
  end

end
